#!/usr/bin/env python3
#
# Copyright (c) 2016-2018, Neil Booth
#
# All rights reserved.
#
# See the file "LICENCE" for information about the copyright
# and warranty status of this software.

'''Script to kick off the server.'''

import asyncio
import logging
import sys
import psutil  # Importing the psutil library for system monitoring

from electrumx import Controller, Env
from electrumx.lib.util import CompactFormatter, make_logger

def get_cpu_usage():
    """Return the current CPU usage as a percentage."""
    return psutil.cpu_percent(interval=1)

def get_memory_usage():
    """Return the current memory usage in MB."""
    memory = psutil.virtual_memory()
    return memory.used / (1024 * 1024)  # Convert bytes to MB

# Function to log performance metrics
async def log_performance_metrics(logger):
    while True:
        cpu_usage = get_cpu_usage()
        memory_usage = get_memory_usage()
        
        logger.info(f"Performance - CPU usage: {cpu_usage}%, Memory usage: {memory_usage:.2f}MB")
        await asyncio.sleep(20)  # Log every 60 seconds

# Custom Controller class to log client connections and errors
class CustomController(Controller):
    def connection_made(self, transport):
        """Log when a client connects."""
        super().connection_made(transport)
        client_ip = transport.get_extra_info('peername')[0]
        logger.info(f'Client connected: {client_ip}')

    def connection_lost(self, transport):
        """Log when a client disconnects."""
        super().connection_lost(transport)
        client_ip = transport.get_extra_info('peername')[0]
        logger.info(f'Client disconnected: {client_ip}')

    def connection_error(self, transport, error):
        """Log any connection errors from clients."""
        super().connection_error(transport, error)
        client_ip = transport.get_extra_info('peername')[0]
        logger.error(f'Connection error from {client_ip}: {error}')

async def main():
    '''Set up logging and run the server.'''
    log_fmt = Env.default('LOG_FORMAT', '%(levelname)s:%(name)s:%(message)s')
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(CompactFormatter(log_fmt))
    global logger
    logger = make_logger('electrumx', handler=handler, level='INFO')

    logger.info('ElectrumX server starting')
    try:
        if sys.version_info < (3, 7):
            raise RuntimeError('ElectrumX requires Python 3.7 or greater')
        env = Env()
        logger.info(f'Logging level: {env.log_level}')
        logger.setLevel(env.log_level)

        # Start performance monitoring
        asyncio.create_task(log_performance_metrics(logger))

        controller = CustomController(env)  # Use the custom controller
        await controller.run()  # Use await instead of asyncio.run
    except Exception:
        logger.exception('ElectrumX server terminated abnormally')
    else:
        logger.info('ElectrumX server terminated normally')

if __name__ == '__main__':
    asyncio.run(main())  # Run the main function with asyncio
